package org.swift.framework.util.log;import com.alibaba.fastjson.JSONObject;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * 统一日志类 */public class SwiftLogger {    //日志跟踪    private static ThreadLocal<JSONObject> logObj = new ThreadLocal<JSONObject>();    public static void setLogObj(String server, String bisNum, String opt, String userUuid) {        JSONObject obj = new JSONObject();        obj.put("server", server);        obj.put("bisNum", bisNum);        obj.put("opt", opt);        obj.put("userUuid", userUuid);        logObj.set(obj);    }    public static void clearLogObj() {        logObj.remove();    }    public static String getBisNum() {        JSONObject logInfo = logObj.get();        return logInfo == null ? null : logInfo.getString("bisNum");    }    /**     * 从线程的堆栈信息中     * 获得调用 SwiftLogger 的那个类信息     * @return     */    public static StackTraceElement findCaller() {        // 获取堆栈信息        StackTraceElement[] callStack = Thread.currentThread().getStackTrace();        if (null == callStack) {            return null;        }        // 最原始被调用的堆栈信息        StackTraceElement caller = null;        // 日志类名称        String logClassName = SwiftLogger.class.getName();        // 循环遍历到日志类标识        boolean isEachLogClass = false;        // 遍历堆栈信息，获取出最原始被调用的方法信息        for (StackTraceElement s : callStack) {            // 遍历到日志类            if (logClassName.equals(s.getClassName())) {                isEachLogClass = true;            }            // 下一个非日志类的堆栈，就是最原始被调用的方法            if (isEachLogClass) {                if (!logClassName.equals(s.getClassName())) {                    isEachLogClass = false;                    caller = s;                    break;                }            }        }        return caller;    }    /**     * 获得调用 SwiftLogger 的那个类信息     * @return     */    private static Logger logger() {        StackTraceElement caller = findCaller();        if (null == caller) {            return LoggerFactory.getLogger(SwiftLogger.class);        }        // 实例化一个原始被调用的类 Logger 对象，并且带上 方法名称、行号，更方便的通过日志定位代码        Logger log = LoggerFactory.getLogger(caller.getClassName() + "." + caller.getMethodName() + "() Line: " + caller.getLineNumber());        return log;    }    private static String getMsg(Object msg) {        JSONObject logInfo = logObj.get();        logInfo = new JSONObject();        logInfo.put("message", msg);        return logInfo == null ? null : logInfo.toString();    }    public static void trace(Object msg) {        trace(msg, null);    }    public static void trace(Object msg, Throwable e) {        logger().trace(getMsg(msg), e);    }    public static void debug(Object msg) {        debug(msg, null);    }    public static void debug(Object msg, Throwable e) {        logger().debug(getMsg(msg), e);    }    public static void info(Object msg) {        info(msg, null);    }    public static void info(Object msg, Throwable e) {        logger().info(getMsg(msg), e);    }    public static void warn(Object msg) {        warn(msg, null);    }    public static void warn(Object msg, Throwable e) {        logger().warn(getMsg(msg), e);    }    public static void error(Object msg) {        error(msg, null);    }    public static void error(Object msg, Throwable e) {        logger().error(getMsg(msg), e);    }}